#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "material.glsl"
#include "constants.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
#include "random.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record;
bool TraceRay(vec3 origin, vec3 direction) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  if (ray_payload.t == -1.0) {
    return false;
  }
  else {
    hit_record = GetHitRecord(ray_payload, origin, direction);
    return true;
  }
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  for (int b = 0; b < guo.num_bounces; b++) {
    if (!TraceRay(origin, direction)) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    } else {
      Material material = materials[hit_record.hit_entity_id];
      throughput *= material.diffuse *
                    vec3(texture(texture_samplers[material.diffuse_texture_id],
                                 hit_record.tex_coord));
      origin = hit_record.position;
      direction = guo.envmap_light_direction;
      radiance += throughput * guo.envmap_minor_color;
      throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
      if (!TraceRay(origin, direction)) {
        radiance += throughput * guo.envmap_major_color;
      }
      break;
    }
  }
  return radiance;
}

vec3 SampleSemisphere(vec3 N, vec3 T) {
  float costheta = RandomFloat();
  float phi = 2.0 * PI * RandomFloat();
  vec3 B = cross(N, T);
  vec3 W = vec3(sqrt(1-costheta*costheta) * cos(phi), sqrt(1-costheta*costheta) * sin(phi), costheta);
  vec3 wi = T * W.x + B * W.y + N * W.z;
  return wi;
}

vec3 SampleRay1(vec3 origin, vec3 direction) {
  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  vec3 p = origin;
  vec3 n = direction;
  vec3 wo = direction;
  vec3 wi = direction;
  float prob = pow(1e-6, 1.0 / guo.num_bounces);
  int cnt = 0;
  for (float b = 0.0; b < prob && cnt < guo.num_bounces; b = RandomFloat()) {
  // float prob = guo.num_bounces / (guo.num_bounces + 1.0);
  // int cnt = 0;
  // for (float b = 0.0; b < prob && cnt < 4 * guo.num_bounces; b = RandomFloat()) {
    if (!TraceRay(p, wi)) {
      radiance = throughput * SampleEnvmap(wi);
      break;
    } else {
      Material material = materials[hit_record.hit_entity_id];
      if (material.material_type == MATERIAL_TYPE_EMISSION) {
        vec3 Le = material.emission;
        radiance = throughput * Le;
        break;
      }
      // vec3 Li = material.diffuse * 0.5 * INV_PI / dot(n, wi) / dot(r, r);
      vec3 Fr = material.diffuse *
                vec3(texture(texture_samplers[material.diffuse_texture_id],
                     hit_record.tex_coord)) * INV_PI;
      throughput *= Fr * dot(n, wi) * 2.0 * PI / prob;
      p = hit_record.position;
      n = hit_record.normal;
      vec3 t = hit_record.tangent;
      wo = -wi;
      wi = SampleSemisphere(n, t);
      // radiance += throughput * guo.envmap_minor_color;
      // throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
      // if (!TraceRay(origin, direction)) {
      //   radiance += throughput * guo.envmap_major_color;
      // }
      // break;
    }
    cnt++;
  }
  return radiance;
}

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  hit_record.hit_entity_id = 0;

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x, d.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay1(origin.xyz, direction.xyz), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
